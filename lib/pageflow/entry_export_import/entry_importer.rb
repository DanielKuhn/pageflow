module Pageflow
  module EntryExportImport
    # Creates an entry from JSON with latest draft and published revision including all used files.
    # The JSON structure must match the one generated by Pageflow::EntrySerializer.
    # A version check is performed for all plugins to assure data compatibility.
    # The newly created entry will be associated with the user passed into the initializer,
    # along with that users account and theming.
    class EntryImporter
      DEFAULT_REMOVAL_COLUMNS = %w[id updated_at].freeze

      def initialize(user, attachments_root_path)
        @user = user
        @account = @user.accounts.first
        @attachments_root_path = attachments_root_path
      end

      def call(json_data)
        import_data = JSON.parse(json_data)

        # Step 1: Create data
        Rails.logger.info 'importing records...'
        import_records(import_data)
        Rails.logger.info '...done!'
        # Step 2: Upload files
        Rails.logger.info 'uploading files...'
        upload_files
        Rails.logger.info '...done!'
        # Step 3: Publish files not included in upload stage
        Rails.logger.info 'publishing generated files...'
        publish_generated_files
        Rails.logger.info '...done!'
      end

      private

      attr_reader :user, :account, :attachments_root_path

      def import_records(import_data)
        EntrySerialization.import(import_data, creator: user, account: account)
      end

      # Recursively upload all files included in the export directory.
      # Files are stored under their respective file type's collection name and their
      # id in the host application they were exported from
      def upload_files
        Dir.foreach(@attachments_root_path) do |collection_name|
          next if %w[. ..].include?(collection_name)
          file_type = Pageflow.config.file_types.find_by_collection_name!(collection_name)
          collection_directory = File.join(@attachments_root_path, collection_name)
          importer = file_type.importer

          # special uploads handling (see Pageflow::Chart's ScrapedSiteImporter for example)
          if importer.respond_to?(:upload_files)
            importer.upload_files(collection_directory, @file_mappings)
          else
            # upload case for file types with standard uploadable file type
            Dir.foreach(collection_directory) do |exported_id|
              next if %w[. ..].include?(exported_id)

              uploadable_file_id = ImportUtils.file_id_for_exported_id(@file_mappings,
                                                                       file_type.model.name,
                                                                       exported_id)
              uploadable_file = file_type.model.find(uploadable_file_id)
              attachment_file_path = File.join(collection_directory,
                                               exported_id,
                                               uploadable_file.file_name)
              UploadAndPublishFileJob.perform_later(file_type.model.name,
                                                    uploadable_file.id,
                                                    attachment_file_path)
            end
          end
        end
      end

      # file publishing for generated files
      def publish_generated_files
        Pageflow.config.file_types.each do |file_type|
          importer = file_type.importer
          importer.publish_files(@entry) if importer.respond_to?(:publish_files)
        end
      end

      def data_compatible_for_import?(page_type_version_requirements)
        page_type_version_requirements.each do |plugin_name, plugin_version_requirement|
          page_type = Pageflow.config.page_types.find_by_name!(plugin_name)
          current_version = Gem::Version.new(page_type.export_version)
          return false unless Gem::Requirement.new(plugin_version_requirement)
                                              .satisfied_by?(current_version)
        end
        true
      end
    end
  end
end
